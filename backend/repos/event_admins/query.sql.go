// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package event_admins

import (
	"context"
)

const createEventAdmin = `-- name: CreateEventAdmin :one
INSERT INTO event_admins (
        event_id,
        user_id
    ) VALUES (
        $1,
        $2
    ) RETURNING id, event_id, user_id
`

type CreateEventAdminParams struct {
	EventID string
	UserID  string
}

func (q *Queries) CreateEventAdmin(ctx context.Context, arg CreateEventAdminParams) (EventAdmin, error) {
	row := q.db.QueryRow(ctx, createEventAdmin, arg.EventID, arg.UserID)
	var i EventAdmin
	err := row.Scan(&i.ID, &i.EventID, &i.UserID)
	return i, err
}

const getEventAdminsByEventId = `-- name: GetEventAdminsByEventId :many
SELECT id, event_id, user_id FROM event_admins WHERE event_id = $1
`

func (q *Queries) GetEventAdminsByEventId(ctx context.Context, eventID string) ([]EventAdmin, error) {
	rows, err := q.db.Query(ctx, getEventAdminsByEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventAdmin
	for rows.Next() {
		var i EventAdmin
		if err := rows.Scan(&i.ID, &i.EventID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
